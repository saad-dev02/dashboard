{
  "info": {
    "name": "10 - Widget Management",
    "description": "Widget management system for company dashboards",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "item": [
    {
      "name": "1. Sign In",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    if (response.token) {",
              "        pm.environment.set('authToken', response.token);",
              "        console.log('Auth token saved:', response.token);",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"admin@saherflow.com\",\n  \"password\": \"admin123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        },
        "description": "Sign in and store auth token"
      },
      "response": []
    },
    {
      "name": "2. Get User Dashboard",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/widgets/user-dashboard",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "user-dashboard"]
        },
        "description": "Get the dashboard for current user's company"
      },
      "response": []
    },
    {
      "name": "3. Get Device Types (Admin Only)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    if (response.data && response.data.length > 0) {",
              "        pm.environment.set('deviceTypeId', response.data[0].id);",
              "        console.log('Device Type ID saved:', response.data[0].id);",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/widgets/device-types",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "device-types"]
        },
        "description": "Get all device types (admin only)"
      },
      "response": []
    },
    {
      "name": "4. Get Available Widgets for Device Type (Admin Only)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    if (response.data && response.data.widgetTypes.length > 0) {",
              "        const lineChart = response.data.widgetTypes.find(wt => wt.name === 'line_chart');",
              "        if (lineChart) {",
              "            pm.environment.set('widgetTypeId', lineChart.id);",
              "            console.log('Widget Type ID saved:', lineChart.id);",
              "        }",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/widgets/available-widgets?deviceTypeId={{deviceTypeId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "available-widgets"],
          "query": [
            {
              "key": "deviceTypeId",
              "value": "{{deviceTypeId}}",
              "description": "Device type ID (e.g., 1 for MPFM)"
            }
          ]
        },
        "description": "Get available widget types and properties for a device type (admin only)"
      },
      "response": []
    },
    {
      "name": "5. Create Widget - Single Property (Admin Only)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    if (response.data && response.data.widgetId) {",
              "        pm.environment.set('widgetId', response.data.widgetId);",
              "        console.log('Widget ID saved:', response.data.widgetId);",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"deviceTypeId\": 1,\n  \"widgetTypeId\": \"{{widgetTypeId}}\",\n  \"properties\": [\n    {\n      \"propertyName\": \"Temperature\",\n      \"displayName\": \"Temperature Chart\"\n    }\n  ],\n  \"displayName\": \"MPFM Temperature Monitor\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/widgets/create-widget",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "create-widget"]
        },
        "description": "Admin creates a widget with single property"
      },
      "response": []
    },
    {
      "name": "6. Create Widget - Multiple Properties (Admin Only)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"deviceTypeId\": 1,\n  \"widgetTypeId\": \"{{widgetTypeId}}\",\n  \"properties\": [\n    {\n      \"propertyName\": \"GVF\",\n      \"displayName\": \"Gas Volume Fraction\"\n    },\n    {\n      \"propertyName\": \"WLR\",\n      \"displayName\": \"Water Liquid Ratio\"\n    }\n  ],\n  \"displayName\": \"GVF and WLR Analysis\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/widgets/create-widget",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "create-widget"]
        },
        "description": "Admin creates a widget with multiple properties"
      },
      "response": []
    },
    {
      "name": "7. Add Widget to Dashboard (Admin Only)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    if (response.data && response.data.layoutId) {",
              "        pm.environment.set('layoutId', response.data.layoutId);",
              "        console.log('Layout ID saved:', response.data.layoutId);",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"widgetDefinitionId\": \"{{widgetId}}\",\n  \"layoutConfig\": {\n    \"x\": 0,\n    \"y\": 0,\n    \"w\": 4,\n    \"h\": 3,\n    \"minW\": 2,\n    \"minH\": 2,\n    \"static\": false\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/widgets/add-to-dashboard",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "add-to-dashboard"]
        },
        "description": "Admin adds a widget to the company dashboard"
      },
      "response": []
    },
    {
      "name": "8. Update Widget Layout (Admin Only)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"layouts\": [\n    {\n      \"layoutId\": \"{{layoutId}}\",\n      \"layoutConfig\": {\n        \"x\": 0,\n        \"y\": 0,\n        \"w\": 6,\n        \"h\": 4,\n        \"minW\": 2,\n        \"minH\": 2,\n        \"static\": false\n      }\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/widgets/update-layout",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "update-layout"]
        },
        "description": "Admin updates widget positions and sizes on dashboard"
      },
      "response": []
    },
    {
      "name": "9. Get Widget Historical Data",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/widgets/widget-data/{{widgetId}}?limit=100&timeRange=24h",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "widget-data", "{{widgetId}}"],
          "query": [
            {
              "key": "limit",
              "value": "100",
              "description": "Number of records"
            },
            {
              "key": "timeRange",
              "value": "24h",
              "description": "Time range: 1h, 6h, 24h, 7d, 30d"
            }
          ]
        },
        "description": "Get historical data for widget from device_data table"
      },
      "response": []
    },
    {
      "name": "10. Get Widget Latest Data",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/widgets/widget-data/{{widgetId}}/latest",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "widget-data", "{{widgetId}}", "latest"]
        },
        "description": "Get latest data for widget from device_latest table"
      },
      "response": []
    },
    {
      "name": "11. Remove Widget from Dashboard (Admin Only)",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/widgets/remove-widget/{{layoutId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "remove-widget", "{{layoutId}}"]
        },
        "description": "Admin removes a widget from the dashboard"
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    }
  ]
}
